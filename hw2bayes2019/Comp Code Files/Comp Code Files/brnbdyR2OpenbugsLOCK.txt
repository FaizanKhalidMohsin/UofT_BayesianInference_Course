######################
#
#  This program runs OpenBUGS through R via R2OpenBUGS
#  this runs the brnbdy example 
#

# basic info setup

WorkDir<-"c:/mike workstation/BayesCourse13/Documents/Temp"
# Note: change this to the file where everything is
setwd(WorkDir)
 
library(R2OpenBUGS)

#  data a bit, long... code after setting up datafile.
cat("body,brain
3.385,44.5
0.48,15.5
1.35,8.1
465,423
36.33,119.5
27.66,115
14.83,98.2
1.04,5.5
4.19,58
0.425,6.4
0.101,4
0.92,5.7
1,6.6
0.005,0.14
0.06,1
3.5,10.8
2,12.3
1.7,6.3
2547,4603
0.023,0.3
187.1,419
521,655
0.785,3.5
10,115
3.3,25.6
0.2,5
1.41,17.5
529,680
207,406
85,325
0.75,12.3
62,1320
6654,5712
3.5,3.9
6.8,179
35,56
4.05,17
0.12,1
0.023,0.4
0.01,0.25
1.4,12.5
250,490
2.5,12.1
55.5,175
100,157
52.16,440
10.55,179.5
0.55,2.4
60,81
3.6,21
4.288,39.2
0.28,1.9
0.075,1.2
0.122,3
0.048,0.33
192,180
3,25
160,169
0.9,2.6
1.62,11.4
0.104,2.5
4.235,50.4",file="brnbdy.csv")

brnbdy.dat<- read.table(file="brnbdy.csv",header=TRUE,sep=",")
attach(brnbdy.dat);
N<-62
data<-list("N","body", "brain")


inits<-function(){ list(alpha=rnorm(1),beta=rnorm(1),tau=runif(1,.5,10))}
parameters<-c("alpha", "beta", "tau")

cat("model{
for(i in 1:N){
lgbrain[i]<-log(brain[i])
lgbody[i]<-log(body[i])

lgbrain[i]~dnorm(mu[i],tau)
mu[i]<-alpha +beta*lgbody[i]
}
alpha~dnorm(0,.0001)
beta~dnorm(0,.0001)
tau~dgamma(.0001,.0001)
}
", file="NonCenterMod.txt")

### run Openbugs through R:
brnbdy.sim<-bugs(data,inits, parameters,model.file="NonCenterMod.txt",
  n.chains=3, n.iter=10000, n.burnin=700,
  n.thin=1,  #,debug=TRUE
  )
  
# post process the MCMC values.  
print(brnbdy.sim)
str(brnbdy.sim)


out.sim<-brnbdy.sim$sims.array

plot(out.sim[,1,"alpha"],out.sim[,1,"beta"],xlab="alpha",ylab="beta")
junk=locator(1)    
#### locator() stops the plot and waits for you to click on the plot

#  simple trace plot:
plot(out.sim[,1,"alpha"],type="l",ylab="alpha")
junk=locator(1)    
#  all three chains on same plot:
ts.plot(out.sim[,,"alpha"],col=c(1,2,3))
junk=locator(1)    
# density plot:
plot(density(out.sim[,,"alpha"]))
junk=locator(1)    
# put all three densities on same plot (need to guess ranges)
plot(c(1.5,3.0), c(0, 5),type="n",
  ylab="", xlab="alpha",main="posterior density of alpha", sub="all three chains")
for(i in 1:3){lines(density(out.sim[,i,"alpha"]))}
junk=locator(1)    
#
#  put multiplots on one plot
#
par(mfrow=c(2,2))
for(i in 1:3){ plot(density(out.sim[,,parameters[i]]),main=parameters[i])}
plot(density(log(out.sim[,,"tau"])),main="log(tau)")
par(mfrow=c(1,1))
junk=locator(1)    

### this will calculate the autocorrelation:
# with the cross corr for the different chains:
acf(out.sim[,,"alpha"],lag.max=40)
junk=locator(1)    
# For one chain:
acf(out.sim[,1,"alpha"],lag.max=40)
